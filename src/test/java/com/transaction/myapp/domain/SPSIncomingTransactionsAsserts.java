package com.transaction.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SPSIncomingTransactionsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSPSIncomingTransactionsAllPropertiesEquals(SPSIncomingTransactions expected, SPSIncomingTransactions actual) {
        assertSPSIncomingTransactionsAutoGeneratedPropertiesEquals(expected, actual);
        assertSPSIncomingTransactionsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSPSIncomingTransactionsAllUpdatablePropertiesEquals(
        SPSIncomingTransactions expected,
        SPSIncomingTransactions actual
    ) {
        assertSPSIncomingTransactionsUpdatableFieldsEquals(expected, actual);
        assertSPSIncomingTransactionsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSPSIncomingTransactionsAutoGeneratedPropertiesEquals(
        SPSIncomingTransactions expected,
        SPSIncomingTransactions actual
    ) {
        assertThat(actual)
            .as("Verify SPSIncomingTransactions auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSPSIncomingTransactionsUpdatableFieldsEquals(
        SPSIncomingTransactions expected,
        SPSIncomingTransactions actual
    ) {
        assertThat(actual)
            .as("Verify SPSIncomingTransactions relevant properties")
            .satisfies(a -> assertThat(a.getMessageid()).as("check messageid").isEqualTo(expected.getMessageid()))
            .satisfies(a -> assertThat(a.getChannelcode()).as("check channelcode").isEqualTo(expected.getChannelcode()))
            .satisfies(a -> assertThat(a.getCallbackurl()).as("check callbackurl").isEqualTo(expected.getCallbackurl()))
            .satisfies(a -> assertThat(a.getMessagetype()).as("check messagetype").isEqualTo(expected.getMessagetype()))
            .satisfies(a -> assertThat(a.getTranscurrency()).as("check transcurrency").isEqualTo(expected.getTranscurrency()))
            .satisfies(a -> assertThat(a.getDebtorsname()).as("check debtorsname").isEqualTo(expected.getDebtorsname()))
            .satisfies(a -> assertThat(a.getDebtorsaccountid()).as("check debtorsaccountid").isEqualTo(expected.getDebtorsaccountid()))
            .satisfies(a -> assertThat(a.getDebtorsbankcode()).as("check debtorsbankcode").isEqualTo(expected.getDebtorsbankcode()))
            .satisfies(a -> assertThat(a.getDebtorsphone()).as("check debtorsphone").isEqualTo(expected.getDebtorsphone()))
            .satisfies(a -> assertThat(a.getBeneficiaryname()).as("check beneficiaryname").isEqualTo(expected.getBeneficiaryname()))
            .satisfies(a ->
                assertThat(a.getBeneficiaryaccountid()).as("check beneficiaryaccountid").isEqualTo(expected.getBeneficiaryaccountid())
            )
            .satisfies(a ->
                assertThat(a.getBeneficiarybankcode()).as("check beneficiarybankcode").isEqualTo(expected.getBeneficiarybankcode())
            )
            .satisfies(a -> assertThat(a.getBeneficiaryphone()).as("check beneficiaryphone").isEqualTo(expected.getBeneficiaryphone()))
            .satisfies(a -> assertThat(a.getNarration()).as("check narration").isEqualTo(expected.getNarration()))
            .satisfies(a -> assertThat(a.getExternalreference()).as("check externalreference").isEqualTo(expected.getExternalreference()))
            .satisfies(a -> assertThat(a.getCbsreference()).as("check cbsreference").isEqualTo(expected.getCbsreference()))
            .satisfies(a -> assertThat(a.getMessageendtoendid()).as("check messageendtoendid").isEqualTo(expected.getMessageendtoendid()))
            .satisfies(a -> assertThat(a.getTransactionstatus()).as("check transactionstatus").isEqualTo(expected.getTransactionstatus()))
            .satisfies(a ->
                assertThat(a.getTransactionstatusdesc()).as("check transactionstatusdesc").isEqualTo(expected.getTransactionstatusdesc())
            )
            .satisfies(a -> assertThat(a.getSpsstatus()).as("check spsstatus").isEqualTo(expected.getSpsstatus()))
            .satisfies(a -> assertThat(a.getSpsstatusdesc()).as("check spsstatusdesc").isEqualTo(expected.getSpsstatusdesc()))
            .satisfies(a -> assertThat(a.getCbsstatus()).as("check cbsstatus").isEqualTo(expected.getCbsstatus()))
            .satisfies(a -> assertThat(a.getCbsstatusdesc()).as("check cbsstatusdesc").isEqualTo(expected.getCbsstatusdesc()))
            .satisfies(a -> assertThat(a.getRequestInstanttime()).as("check requestInstanttime").isEqualTo(expected.getRequestInstanttime())
            )
            .satisfies(a -> assertThat(a.getIsomessagetype()).as("check isomessagetype").isEqualTo(expected.getIsomessagetype()))
            .satisfies(a -> assertThat(a.getRequestjson()).as("check requestjson").isEqualTo(expected.getRequestjson()))
            .satisfies(a -> assertThat(a.getSpsrequestxml()).as("check spsrequestxml").isEqualTo(expected.getSpsrequestxml()))
            .satisfies(a -> assertThat(a.getSpsresponsexml()).as("check spsresponsexml").isEqualTo(expected.getSpsresponsexml()))
            .satisfies(a -> assertThat(a.getAmount()).as("check amount").isEqualTo(expected.getAmount()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSPSIncomingTransactionsUpdatableRelationshipsEquals(
        SPSIncomingTransactions expected,
        SPSIncomingTransactions actual
    ) {
        // empty method
    }
}
